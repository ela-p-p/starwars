{"version":3,"sources":["components/Select.js","components/Card.js","components/App.js","serviceWorker.js","index.js"],"names":["Select","handleChange","event","props","handleSelect","target","value","name","id","onChange","this","characters","map","i","key","Component","Card","className","character","toUpperCase","App","state","display","undefined","clickHandler","fetch","then","response","json","results","console","log","setState","randomCharacter","array","Math","floor","random","length","res","style","backgroundColor","height","borderRadius","margin","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAuBeA,G,uNApBXC,aAAe,SAAAC,GACX,EAAKC,MAAMC,aAAaF,EAAMG,OAAOC,OACrCJ,EAAMG,OAAOC,MAAQ,I,wEAKzB,OACI,4BAAQC,KAAK,aAAaC,GAAG,aAAaC,SAAUC,KAAKT,cACrD,4BAAQK,MAAM,IAAd,qBACCI,KAAKP,MAAMQ,WAAWC,KAAI,SAACL,EAAMM,GAC9B,OAAO,4BAAQP,MAAOC,EAAKA,KAAMO,IAAKD,GAAIN,EAAKA,c,GAZ1CQ,cC6CNC,E,sNAxBX,OACE,yBAAKC,UAAU,wBACb,gCACE,0CAEF,iCACE,4BAAKP,KAAKP,MAAMe,UAAUC,gBAS5B,kBAAC,EAAD,CACER,WAAYD,KAAKP,MAAMQ,WACvBP,aAAcM,KAAKP,MAAMC,oB,GA1BhBW,aCiEJK,E,2MAzEbC,MAAQ,CACNC,aAASC,EACTZ,WAAY,GACZO,UAAW,I,EAGbM,aAAe,WACbC,MAAM,+BACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,EAAQA,SACpB,EAAKG,SAAS,CACZrB,WAAYkB,EAAQA,UAG1B,EAAKI,gBAAgB,EAAKZ,MAAMV,YAChC,EAAKqB,SAAS,CACZV,aAASC,Q,EAKbU,gBAAkB,SAAAC,GAChB,IACID,EAAkBC,EADNC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,SACV/B,KACvC,EAAKyB,SAAS,CACZd,UAAWe,K,EAIf7B,aAAe,SAAAE,GACb,IAAIiC,EAAMjC,IAAU,EAAKe,MAAMH,UAC/B,EAAKc,SAAS,CACZV,QAASiB,K,wEAKX,OACE,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,MAChB,iDAEF,6BAASA,UAAU,OACjB,8DACA,iFACA,4BACEuB,MAAO,CACLC,gBAAiB,SACjBC,OAAQ,MACRC,aAAc,MACdC,OAAQ,OAEVC,QAASnC,KAAKc,cAPhB,cAWCd,KAAKW,MAAMC,SAAW,wBAAIL,UAAU,OAAd,gBACC,IAAvBP,KAAKW,MAAMC,SAAqBZ,KAAKW,MAAMH,WAAa,wBAAID,UAAU,OAAd,cACxDP,KAAKW,MAAMH,WACV,kBAAC,EAAD,CACEA,UAAWR,KAAKW,MAAMH,UACtBP,WAAYD,KAAKW,MAAMV,WACvBW,QAASZ,KAAKW,MAAMC,QACpBlB,aAAcM,KAAKN,qB,GAjEfW,aCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.579e6ccc.chunk.js","sourcesContent":["import React, {Component } from 'react';\n\nclass Select extends Component {\n    handleChange = event => {\n        this.props.handleSelect(event.target.value)\n        event.target.value = ''\n    }\n    \nrender() {\n    \n    return (\n        <select name=\"characters\" id=\"characters\" onChange={this.handleChange}>\n            <option value=\"\">Please Select One</option>\n            {this.props.characters.map((name, i) => {\n                return <option value={name.name} key={i}>{name.name}</option>\n            })}\n            \n        </select>\n    )\n}\n    \n}\n\nexport default Select;","import React, { Component } from \"react\";\nimport \"./Card.css\";\nimport Select from \"./Select\";\n\n// let characterPicArray = [\n// Beru,\n// C3PO,\n// DarthVader,\n// Leia,\n// Luke,\n// Owen,\n// R2D2,\n// R5D4\n// ];\nclass Card extends Component {\n  \n  pickImage() {\n    // let choice = characterPicArray.filter(star => {\n    //     console.log(star)\n    // })\n  }\n  \n  render() {\n    return (\n      <div className=\"ba b--dashed bw1 pa3\">\n        <header>\n          <h1>Who am I?</h1>\n        </header>\n        <section>\n          <h1>{this.props.character.toUpperCase()}</h1>\n\n          {/* <img\n            alt=\"loading\"\n            src={this.pickImage()}\n            // className=\"rotate\"\n            // style={{ width: 150, height: 150 }}\n          /> */}\n        </section>\n        <Select\n          characters={this.props.characters}\n          handleSelect={this.props.handleSelect}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Card from \"../components/Card\";\n// import { charactersApi } from \"./characters\";\n\nclass App extends Component {\n  state = {\n    display: undefined,\n    characters: [],\n    character: \"\"\n  };\n\n  clickHandler = () => {\n    fetch(\"https://swapi.co/api/people\")\n      .then(response => response.json())\n      .then(results => {\n        console.log(results.results);\n        this.setState({\n          characters: results.results\n        });\n\n    this.randomCharacter(this.state.characters);\n    this.setState({\n      display: undefined\n    });\n    });\n  };\n\n  randomCharacter = array => {\n    let randomNum = Math.floor(Math.random() * array.length);\n    let randomCharacter = array[randomNum].name;\n    this.setState({\n      character: randomCharacter\n    });\n  };\n\n  handleSelect = value => {\n    let res = value === this.state.character ? true : false;\n    this.setState({\n      display: res\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"f1\">\n          <h1 >Star Wars Trivia</h1>\n        </header>\n        <section className=\"mt5\">\n          <h3>Test your Star Wars knowledge!</h3>\n          <p>Match the name with an item from the dropdown menu</p>\n          <button\n            style={{\n              backgroundColor: \"orange\",\n              height: \"2em\",\n              borderRadius: \"2em\",\n              margin: \"2em\"\n            }}\n            onClick={this.clickHandler}\n          >\n            Randomizer\n          </button>\n          {this.state.display && <h1 className=\"f1 \">Winner!!!!!</h1>}\n          {this.state.display === false && this.state.character && <h1 className=\"f1 \">Try Again?</h1>}\n          {this.state.character && (\n            <Card\n              character={this.state.character}\n              characters={this.state.characters}\n              display={this.state.display}\n              handleSelect={this.handleSelect}\n            />\n          )}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'tachyons'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}